AWSTemplateFormatVersion: 2010-09-09
Description: |

  Jenkins Project
  
Parameters:

  KeyPair:
    Description: Please select your Key File 
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  
  EC2ConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS:AccountId}:instance/*"
            Condition": {"StringEquals": {"aws:ResourceTag/project":"jenkins"}}
          - Effect: Allow
          - Action:
              - ec2:DescribeInstances
            Resource: "*"  
  
  EC2ConnectRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref EC2ConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2ConnectRole

  SecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: All for Docker Swarm
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
  
  GrandMaster:
    Type: "AWS::EC2::Instance"
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt SecGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub Docker Manager 1 of ${AWS:StackName}
        - Key: project
          Value: jenkins
      UserData:
        Fn::Base64:
          !Sub |
            #! /bin/bash
            yum update -y
            hostnamectl set-hostname Grand-Master
            bash
            # install docker
            amazon-linux-extras install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            newgrp docker
            # install docker-compose
            curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker swarm init
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager \
            --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer
            yum install git -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            yum install amazon-ecr-credential-helper
            mkdir -p /home/ec2-user/.docker
            cd /home/ec2-user/.docker
            echo "{"credsStore": "ecr-login"}" > config.json
            aws ecr create-repository --repository-name ${AWS::StackName}/phonebook \
            --image-scanning-configuration scanOnPush=true --image-tag-mutability IMMUTABLE --region ${AWS::Region}
            docker build --force-rm -t ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}/phonebook:latest ${GITHUB}
            docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}/phonebook:latest
            mkdir -p /home/ec2-user/project
            cd /home/ec2-user/project
            cat << EOF | tee .env
            ECR_REGISTRY=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME=${AWS::StackName}/phonebook
            EOF
            curl -o "docker-compose.yml" -L ${GIT_FILE_URL}docker-compose.yml
            curl -o "init.sql" -L ${GIT_FILE_URL}init.sql
            docker-compose config | docker stack deploy --with-registry-auth -c - project
          - GITHUB: https://github.com/E2031-Salih/cw_AWS_Dev_Ops_Workshop.git/devops/projects/202-jenkins-pipeline-for-phonebook-app-on-docker-swarm/
            GIT_FILE_URL: https://raw.githubusercontent.com/E2031-Salih/cw_AWS_Dev_Ops_Workshop/master/devops/projects/202-jenkins-pipeline-for-phonebook-app-on-docker-swarm/

  ManagerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          ImageId: ami-0947d2ba12ee1ff75
          InstanceType: t2.micro
          KeyName: !Ref KeyName
          SecurityGroupIds:
            - !GetAtt SecGroup.GroupId
          UserData:
            Fn::Base64:
              !Sub |
                #! /bin/bash
                yum update -y
                hostnamectl set-hostname Grand-Master
                bash
                # install docker
                amazon-linux-extras install docker -y
                systemctl start docker
                systemctl enable docker
                usermod -a -G docker ec2-user
                newgrp docker
                # install docker-compose
                curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
                yum install python3 -y
                pip3 install awsinstanceconnectcli
                eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no --region ${AWS::Region} \
                ${GrandMaster} docker swarm join-token manager | grep -i "docker")"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                yum install amazon-ecr-credential-helper
                mkdir -p /home/ec2-user/.docker
                cd /home/ec2-user/.docker
                echo "{"credsStore": "ecr-login"}" > config.json

  WorkerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          ImageId: ami-0947d2ba12ee1ff75
          InstanceType: t2.micro
          KeyName: !Ref KeyName
          SecurityGroupIds:
            - !GetAtt SecGroup.GroupId
          UserData:
            Fn::Base64:
              !Sub |
                #! /bin/bash
                yum update -y
                hostnamectl set-hostname Grand-Master
                bash
                # install docker
                amazon-linux-extras install docker -y
                systemctl start docker
                systemctl enable docker
                usermod -a -G docker ec2-user
                newgrp docker
                # install docker-compose
                curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
                yum install python3 -y
                pip3 install awsinstanceconnectcli
                eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no --region ${AWS::Region} \
                ${GrandMaster} docker swarm join-token worker | grep -i "docker")"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                yum install amazon-ecr-credential-helper
                mkdir -p /home/ec2-user/.docker
                cd /home/ec2-user/.docker
                echo "{"credsStore": "ecr-login"}" > config.json

  Manager2:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Ref ManagerLT
        Version: !GetAtt ManagerLT.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub Docker Manager 2 of ${AWS:StackName}
        - Key: project
          Value: jenkins
    DependsOn:
      - GrandMaster

  Manager3:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Ref ManagerLT
        Version: !GetAtt ManagerLT.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub Docker Manager 3 of ${AWS:StackName}
        - Key: project
          Value: jenkins
    DependsOn:
      - Manager2

  Worker1:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Ref WorkerLT
        Version: !GetAtt WorkerLT.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub Docker Worker 1 of ${AWS:StackName}
        - Key: project
          Value: jenkins
    DependsOn:
      - Manager3

  Worker2:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Ref WorkerLT
        Version: !GetAtt WorkerLT.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub Docker Worker 2 of ${AWS:StackName}
        - Key: project
          Value: jenkins
    DependsOn:
      - Worker1
  
Outputs:
  PhonebookAppWebsiteURL:
    Description: Phonebook App Website URL
    Value: !Sub 
      - http://${PublicAddress}
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName

  VisualizationAppWebsiteURL:
    Description: Visualization App Website URL
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName